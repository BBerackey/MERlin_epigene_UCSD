{
    "analysis_tasks": [
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp"
        },
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp"
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "fov_per_iteration": 2,
                "iteration_count": 2,
                "optimize_chromatic_correction": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize2",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "fov_per_iteration": 2,
                "iteration_count": 2,
                "optimize_chromatic_correction": false,
                "previous_iteration": "Optimize1"
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize2",
                "global_align_task": "SimpleGlobalAlignment",
                "crop_width": 10
            }
        },
        {
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign"
        },
        {
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp"
            }
        },
        {
            "task": "FilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "area_threshold": 5,
                "intensity_threshold": 1
            }
        },
        {
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "run_after_task": "Decode"
            }
        },
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "adaptive_task": "GenerateAdaptiveThreshold"
            }
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "parameters": {
                "filter_task": "FilterBarcodes"
            }
        },
        {
            "task": "PlotPerformance",
            "module": "merlin.analysis.plotperformance",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize2",
                "decode_task": "Decode",
                "filter_task": "AdaptiveFilterBarcodes",
                "global_align_task": "SimpleGlobalAlignment"
            }
        }
    ]

}
